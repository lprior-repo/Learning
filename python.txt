How do youy declare a dict in python?
car = {
  "brand": "Tesla",
  "model": "3",
  "year": 2019
}

Because dictionaries rely on unique keys, you can't have two of the same key in the same dictionary. If you try to use the same key twice, the first value will simply be overwritten.

How do you access keys in python?
car = {
    'make': 'tesla',
    'model': '3'
}
print(car['make'])
# Prints: tesla

How do you update the values of a dictionary?
names = ["jack bronson", "jill mcarty", "john denver"]

names_dict = {}
for name in names:
    # .split() returns a list of strings
    # where each string is a single word from the original
    name_lst = name.split()

    # here we update the dictionary
    names_dict[name_lst[0]] = name_lst[1]

print(names_dict)
# Prints: {'jack': 'bronson', 'jill': 'mcarty', 'john': 'denver'}

WHat happens when you set a value to a new value in a dict?
You overwrite it

How do you delete a dict value in Python?
names_dict = {
    'jack': 'bronson',
    'jill': 'mcarty',
    'joe': 'denver'
}

del names_dict['joe']

print(names_dict)
# Prints: {'jack': 'bronson', 'jill': 'mcarty'}

What happens if you delete a key that doesn't exist?
You get an error

We need to be able to report to our players how many enemies are in their immediate vicinity - but they want the count of each enemy by its kind. Complete the count_enemies function. It takes a list of enemy names as input. It should return a dictionary where the keys are all the enemy names from the list, and the values are the counts of how many times each enemy appeared in the list.
def count_enemies(enemy_names):
    enemies_dict = {}
    for enemy_name in enemy_names:
        if enemy_name in enemies_dict:
            enemies_dict[enemy_name] += 1
        else:
            enemies_dict[enemy_name] = 1
    return enemies_dict


    Flashcard: Creating a Dictionary
        Front: How do you create a dictionary in Python?
        Back: Use curly braces {} or the dict() function. Example: my_dict = {'key': 'value'} or my_dict = dict(key='value').

    Flashcard: Accessing Values
        Front: How do you access the value associated with a key in a dictionary?
        Back: Use the syntax dict[key]. Example: value = my_dict['key'].

    Flashcard: Adding or Updating Entries
        Front: How do you add or update an entry in a dictionary?
        Back: Assign a value to a key using dict[key] = value. If the key exists, it's updated; if not, it's added.

    Flashcard: Removing Entries
        Front: How do you remove an entry from a dictionary?
        Back: Use del dict[key] to remove a specific entry or dict.pop(key) to remove and return the value.

    Flashcard: Checking for a Key
        Front: How do you check if a key exists in a dictionary?
        Back: Use key in dict. Returns True if the key is in the dictionary, False otherwise.

    Flashcard: Iterating Over a Dictionary
        Front: How can you iterate over the keys, values, and key-value pairs in a dictionary?
        Back: Use dict.keys(), dict.values(), and dict.items() respectively in a for loop.

    Flashcard: Dictionary Comprehensions
        Front: What is a dictionary comprehension and how do you use it?
        Back: A concise way to create dictionaries. Syntax: {key: value for (key, value) in iterable}.

    Flashcard: Merging Dictionaries
        Front: How do you merge two dictionaries in Python?
        Back: Use the update() method or {**dict1, **dict2} in Python 3.5+.

    Flashcard: Default Values
        Front: How do you get a value for a key or return a default if the key is not in the dictionary?
        Back: Use dict.get(key, default).

    Flashcard: Nested Dictionaries
        Front: What is a nested dictionary and how do you access its elements?
        Back: A dictionary within another dictionary. Access elements using dict[outer_key][inner_key].
